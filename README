TP INF 224
Eleve : REME Raphael


Etape 1 :
//

Etape 2 :
//

Etape 3 :
En créant un objet Media m, on ne peut pas acceder à m->name qui est private.
Cela respecte bien notre principe d'encapsulation.

Etape 4 :
Read est une méthode abstraite, il faut la déclarer avec virtual et valant 0.
-> virtual void read() const = 0;

On ne peut alors plus instancier d'objets de classe Media car la classe est abstraite.
Sa méthode read n'est pas définie.

Etape 5 :
On utilise le polymorphisme : une Video et une Photo sont tout le deux des Media.
C'est un tableau de pointeurs vers des Media. Il contient donc des pointeurs.
Cela est nécessaire car tous les objets n'ont pas la même taille. Et c'est
la même chose en Java.

Etape 6 :
Il faut recopier le tableau à l'instanciation de l'objet. Ainsi personne d'autres
que l'objet n'y a accès. Pour l'accesseur, on peut recopier à nouveau le tableau.
Mais cela implique des possibles fuites mémoires si personne ne delete le tableau
dynamiquement crée. Une autre solution est de renvoyer le pointeur du tableau comme
un const int *. (Cela n'empêche pas l'utilisateur de vraiment modifier l'objet,
mais ça lui complique la vie et lui indique bien qu'il ne faut pas le faire)

Enfin, on pourrait demander à l'utilisateur de fournir un tableau  qu'il
aurait allouer et recopier notre tableau dans le sien.

Etape 7 :
La classe film crée un tableau dynamiquement dans son constructeur. Elle doit
donc le delete dans son destructeur.
Si on copie un objet on peut avoir des problèmes si celui ci à des pointeurs vers
d'autres objets. Si on ne fait que copier superficiellement les pointeurs, alors
ils seront partagés entre deux objets. Il faudrait copier aussi récursivement les
objets pointés.

Etape 8 :
si on fait une liste de Media, chaque cellule de la liste devra contenir un Media.
Mais comme un film ne fait pas le même taille que les photos ni que les videos,
cela ne peut pas marcher. On utilise donc des pointeurs. (les pointeurs font la même taille
même si les pointés sont de tailles différentes.)
cela fonctionne pareil en Java.

Etape 9 :
//

Etape 10 :
On peut passer les constructeurs des classes en privé (protected en fait pour que les
sous classes y aient toujours acces) et rajouter la classe table en friend.

Etape 11 :
On peut declarer cette fonction comme méthode de la classe précédente. Ainsi elle a
accès à tous ses attributs.
